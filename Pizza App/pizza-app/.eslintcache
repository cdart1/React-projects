[{"C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\index.js":"1","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\App.js":"2","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\reportWebVitals.js":"3","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Forms.js":"4","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Nav.js":"5","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Jumbotron.js":"6","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Prices.js":"7","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\ThankYou.js":"8","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Receipt.js":"9"},{"size":565,"mtime":1608684907212,"results":"10","hashOfConfig":"11"},{"size":6704,"mtime":1609272543674,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":23335,"mtime":1609269625684,"results":"14","hashOfConfig":"11"},{"size":716,"mtime":1609275270065,"results":"15","hashOfConfig":"11"},{"size":912,"mtime":1608762131507,"results":"16","hashOfConfig":"11"},{"size":5334,"mtime":1609274320323,"results":"17","hashOfConfig":"11"},{"size":421,"mtime":1609219954023,"results":"18","hashOfConfig":"11"},{"size":1766,"mtime":1609267934766,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ucra5s",{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\index.js",[],["44","45"],"C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\App.js",["46","47","48","49","50"],"import React, {useState, useEffect} from \"react\";\r\nimport { Container, Jumbotron } from \"react-bootstrap\";\r\nimport './App.css';\r\nimport PizzaForm from \"./components/Forms\";\r\nimport PizzaVideo from \"./components/video/pizza-video.mp4\";\r\nimport PizzaImg from \"./components/img/Vegan-Pizza2.jpg\";\r\nimport Nav from \"./components/Nav\";\r\nimport Jumbo from \"./components/Jumbotron\";\r\nimport Prices from \"./components/Prices\";\r\nimport ThankYou from \"./components/ThankYou\";\r\nimport { render } from \"@testing-library/react\";\r\nimport Receipt from \"./components/Receipt\";\r\n\r\nfunction App() {\r\n  // Size\r\n  const [selectedSize, setSelectedSize] = useState(\"Personal\");\r\n  const [selectedSizeCost, setSelectedSizeCost] = useState(6);\r\n\r\n  // Crust\r\n  const [selectedCrust, setSelectedCrust] = useState(\"Plain Crust\");\r\n  const [selectedCrustCost, setSelectedCrustCost] = useState(0);\r\n\r\n  // Sauce\r\n  const [selectedSauce, setSelectedSauce] = useState(\"Marinara Sauce\");\r\n\r\n  // Cheese\r\n  const [selectedCheese, setSelectedCheese] = useState(\"Regular\");\r\n  const [selectedCheeseCost, setSelectedCheeseCost] = useState(0);\r\n\r\n  // Meat\r\n  const [allMeat, setAllMeat] = useState([\r\n    {meatName: \"Pepperoni\", isChecked: false},\r\n    {meatName: \"Sausage\", isChecked: false},\r\n    {meatName: \"Canadian Bacon\", isChecked: false},\r\n    {meatName: \"Chicken\", isChecked: false},\r\n    {meatName: \"Buffalo Chicken\", isChecked: false},\r\n    {meatName: \"Vegan Chick'n\", isChecked: false},\r\n    {meatName: \"Vegan Sausage\", isChecked: false},\r\n  ]);\r\n  const [selectedMeat, setSelectedMeat] = useState([]);\r\n  const [selectedMeatCost, setSelectedMeatCost] = useState(0);\r\n  const [meatStr, setMeatStr] = useState(\"\");\r\n\r\n  // Veggies\r\n  const [allVeggies, setAllVeggies] = useState([\r\n    {vegName : \"Tomatoes\", isChecked : false},\r\n    {vegName : \"Onions\", isChecked : false},\r\n    {vegName : \"Olives\", isChecked : false},\r\n    {vegName : \"Green Peppers\", isChecked : false},\r\n    {vegName : \"Mushrooms\", isChecked : false},\r\n    {vegName : \"Pineapple\", isChecked : false},\r\n    {vegName : \"Spinach\", isChecked : false},\r\n    {vegName : \"Jalapeno\", isChecked : false},\r\n  ]);\r\n  const [selectedVeggies, setSelectedVeggies] = useState([]);\r\n  const [selectedVegCost, setSelectedVegCost] = useState(0);\r\n  const [vegStr, setVegStr] = useState(\"\");\r\n\r\n  // Order total\r\n  const [orderPlaced, setOrderPlaced] = useState(false);\r\n  const [orderTotal, setOrderTotal] = useState();\r\n\r\n  // Button disabling\r\n  const [buttonState, setButtonState] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//         receipt();\r\n//     }, [orderPlaced]);\r\n\r\n  const clearAll = () => {\r\n    setSelectedSize(\"Personal\");\r\n    setSelectedSizeCost(6);\r\n    setSelectedCrust(\"Plain Crust\");\r\n    setSelectedCrustCost(0);\r\n    setSelectedSauce(\"Marinara Sauce\");\r\n    setSelectedCheese(\"Regular\");\r\n    setSelectedCheeseCost(0);\r\n    setAllMeat(allMeat.map((item) => {\r\n        if (item.isChecked === true){\r\n            return {\r\n                ...item, isChecked: !item.isChecked\r\n            }\r\n        }\r\n        return item;\r\n    }));\r\n    setSelectedMeatCost(0);\r\n    setAllVeggies(allVeggies.map((item) => {\r\n        if (item.isChecked === true){\r\n            return {\r\n                ...item, isChecked: !item.isChecked\r\n            }\r\n        }\r\n        return item;\r\n    }));\r\n    setSelectedVegCost(0);\r\n    setButtonState(false);\r\n    setOrderPlaced(false);\r\n  };\r\n\r\n  \r\n    let util = null\r\n      if(orderPlaced){\r\n        util = <Receipt\r\n        selectedSize={selectedSize}\r\n        selectedSizeCost={selectedSizeCost}\r\n\r\n        selectedCrust={selectedCrust}\r\n        selectedCrustCost={selectedCrustCost}\r\n\r\n        selectedSauce={selectedSauce}\r\n\r\n        selectedCheese={selectedCheese}\r\n        selectedCheeseCost={selectedCheeseCost}\r\n\r\n        selectedMeat={selectedMeat}\r\n        meatStr={meatStr}\r\n\r\n        selectedVeggies={selectedVeggies}\r\n        vegStr={vegStr}\r\n\r\n        orderTotal={orderTotal}\r\n         />\r\n      }\r\n\r\n\r\n  return (\r\n    <Container \r\n    style={{ marginTop: \"30px\", marginBottom: \"30px\" }}>\r\n      <Nav />\r\n      <img src={ PizzaImg } \r\n      style={{\r\n        position: \"fixed\",\r\n        minWidth: \"100%\",\r\n        minHeight: \"100%\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        // right: \"20%\",\r\n        // bottom: \"20%\",\r\n        // objectFit: \"cover\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        zIndex: \"-1\"\r\n      }}/>\r\n      {/* Jumbotron here */}\r\n      <Jumbo />\r\n      <Prices \r\n        setSelectedSize={setSelectedSize}\r\n        setSelectedSizeCost={setSelectedSizeCost}\r\n\r\n        setSelectedCrust={setSelectedCrust}\r\n        setSelectedCrustCost={setSelectedCrustCost}\r\n\r\n        setSelectedSauce={setSelectedSauce}\r\n\r\n        allMeat={allMeat}\r\n        setAllMeat={setAllMeat}\r\n        setSelectedMeat={setSelectedMeat}\r\n        setSelectedMeatCost={setSelectedMeatCost}\r\n\r\n        allVeggies={allVeggies}\r\n        setAllVeggies={setAllVeggies}\r\n        setSelectedVegCost={setSelectedVegCost}\r\n\r\n        clearAll={clearAll}\r\n        buttonState={buttonState}\r\n        setButtonState={setButtonState}\r\n      />\r\n      <PizzaForm \r\n        selectedSize={selectedSize}\r\n        setSelectedSize={setSelectedSize}\r\n        selectedSizeCost={selectedSizeCost}\r\n        setSelectedSizeCost={setSelectedSizeCost}\r\n\r\n        selectedCrust={selectedCrust}\r\n        setSelectedCrust={setSelectedCrust}\r\n        selectedCrustCost={selectedCrustCost}\r\n        setSelectedCrustCost={setSelectedCrustCost}\r\n\r\n        selectedSauce={selectedSauce}\r\n        setSelectedSauce={setSelectedSauce}\r\n\r\n        selectedCheese={selectedCheese}\r\n        setSelectedCheese={setSelectedCheese}\r\n        selectedCheeseCost={selectedCheeseCost}\r\n        setSelectedCheeseCost={setSelectedCheeseCost}\r\n\r\n        allMeat={allMeat}\r\n        setAllMeat={setAllMeat}\r\n        selectedMeat={selectedMeat}\r\n        setSelectedMeat={setSelectedMeat}\r\n        selectedMeatCost={selectedMeatCost}\r\n        setSelectedMeatCost={setSelectedMeatCost}\r\n        meatStr={meatStr}\r\n        setMeatStr={setMeatStr}\r\n\r\n        allVeggies={allVeggies}\r\n        setAllVeggies={setAllVeggies}\r\n        selectedVegCost={selectedVegCost}\r\n        setSelectedVegCost={setSelectedVegCost}\r\n        selectedVeggies={selectedVeggies}\r\n        setSelectedVeggies={setSelectedVeggies}\r\n        vegStr={vegStr}\r\n        setVegStr={setVegStr}\r\n\r\n        orderPlaced={orderPlaced}\r\n        setOrderPlaced={setOrderPlaced}\r\n        orderTotal={orderTotal}\r\n        setOrderTotal={setOrderTotal}\r\n\r\n        clearAll={clearAll}\r\n      />\r\n      {util}\r\n      <ThankYou />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\reportWebVitals.js",[],"C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Forms.js",["51","52","53","54","55","56"],"import { render } from \"@testing-library/react\";\r\nimport React, {useEffect} from \"react\";\r\nimport { Col, Form, Row, Container, Jumbotron, Card, CardGroup, Button } from 'react-bootstrap';\r\n\r\nconst PizzaForm = ({ selectedSize, setSelectedSize, \r\n                    selectedSizeCost, setSelectedSizeCost, \r\n\r\n                    selectedCrust, setSelectedCrust,\r\n                    selectedCrustCost, setSelectedCrustCost, \r\n\r\n                    selectedSauce, setSelectedSauce,\r\n\r\n                    selectedCheese, setSelectedCheese,\r\n                    selectedCheeseCost, setSelectedCheeseCost,\r\n\r\n                    allMeat, setAllMeat,\r\n                    selectedMeat, setSelectedMeat,\r\n                    selectedMeatCost, setSelectedMeatCost,\r\n                    meatStr, setMeatStr,\r\n\r\n                    allVeggies, setAllVeggies,\r\n                    selectedVeggies, setSelectedVeggies,\r\n                    selectedVegCost, setSelectedVegCost,\r\n                    vegStr, setVegStr,\r\n\r\n                    orderPlaced, setOrderPlaced,\r\n                    orderTotal, setOrderTotal,\r\n                    clearAll\r\n                }) => {\r\n\r\n    // Sets selected size state.\r\n    const selectedSizeHandler = (e) => {\r\n        const sizeCosts = {\r\n            \"Personal\": 6, \r\n            \"Medium\": 10,\r\n            \"Large\": 14,\r\n            \"Extra Large\": 16,\r\n        };\r\n        setSelectedSize(e.target.value);\r\n        setSelectedSizeCost(sizeCosts[e.target.value]);\r\n    }\r\n\r\n    //   Sets selected crust state.\r\n    const selectedCrustHandler = (e) => {\r\n        const crustCosts = {\r\n            \"Plain Crust\": 0,\r\n            \"Garlic Butter Crust\": 2,\r\n            \"Cheese Stuffed Crust\": 3,\r\n            \"Spicy Crust\": 1,\r\n            \"House Special Crust\": 0,\r\n        };\r\n        setSelectedCrust(e.target.value);\r\n        setSelectedCrustCost(crustCosts[e.target.value]);\r\n    }\r\n\r\n    // Sets selected sauce state.\r\n    const selectedSauceHandler = (e) => {\r\n        const sauceCosts = {\r\n            \"Marinara Sauce\": 0,\r\n            \"White Sauce\": 0,\r\n            \"Barbeque Sauce\": 0,\r\n            \"No Sauce\": 0,\r\n        };\r\n        setSelectedSauce(e.target.value);\r\n    }\r\n\r\n    // Sets selected cheese state.\r\n    const selectedCheeseHandler = (e) => {\r\n        const cheeseCosts = {\r\n            \"Regular\": 0,\r\n            \"No Cheese\": 0,\r\n            \"Extra Cheese\": 3,\r\n            \"Vegan Cheeze\": 2,\r\n        };\r\n        setSelectedCheese(e.target.value);\r\n        setSelectedCheeseCost(cheeseCosts[e.target.value]);\r\n    }\r\n\r\n    // Meat\r\n    const selectedMeatHandler = (e) => {\r\n        setAllMeat(allMeat.map((item) => {\r\n            if (item.meatName === e.target.value){\r\n                return {\r\n                    ...item, isChecked: !item.isChecked\r\n                }\r\n            }\r\n            return item;\r\n        }));\r\n    }\r\n\r\n    // Add to or remove meat from list.\r\n    const createCheckedMeatList = () => {\r\n        setSelectedMeat(allMeat.filter((el) => el.isChecked === true));\r\n    }\r\n\r\n    const addUpMeatCost = () => {\r\n        if (selectedMeat.length !== 0) {\r\n            setSelectedMeatCost(selectedMeat.length - 1);\r\n        }\r\n    }\r\n\r\n\r\n    // Veggies\r\n    const selectedVeggiesHandler = (e) => {\r\n        setAllVeggies(allVeggies.map((item) => {\r\n            if (item.vegName === e.target.value) {\r\n                return {\r\n                    /*With spreading, you can change a property non-destructively: \r\n                    You make a copy of the object where the property has a different value. */\r\n                    ...item, isChecked: !item.isChecked\r\n                }\r\n            }\r\n            return item;\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        createCheckedVegList();\r\n        createCheckedMeatList();\r\n    }, [allVeggies, allMeat]);\r\n\r\n    useEffect(() => {\r\n        addUpVegCost();\r\n        addUpMeatCost();\r\n    }, [selectedVeggies, selectedMeat]);\r\n\r\n    // Add to or remove veggies from list.\r\n    const createCheckedVegList = () => {\r\n        setSelectedVeggies(allVeggies.filter((el) => el.isChecked === true));\r\n    }\r\n\r\n    const addUpVegCost = () => {\r\n        if (selectedVeggies.length !== 0) {\r\n            setSelectedVegCost(selectedVeggies.length - 1);\r\n        }\r\n    }\r\n\r\n    //  useEffect is constantly listening for state changes, and it runs whenever it does change.\r\n    useEffect(() => {\r\n        orderTotalHandler();\r\n    }, [selectedSizeCost, selectedCrustCost, selectedCheeseCost, selectedMeatCost, selectedVegCost]);\r\n\r\n    const orderTotalHandler = () => {\r\n        let total = selectedSizeCost + selectedCrustCost + \r\n        selectedCheeseCost + selectedMeatCost + selectedVegCost;\r\n        setOrderTotal(total);\r\n    }\r\n\r\n    const getCosts = (e) => {\r\n        setOrderPlaced(true);\r\n        meatReceipt();\r\n        vegReceipt();\r\n    };\r\n\r\n    const meatReceipt = () => {\r\n        let meatConcat = \"\";\r\n        for (let i = 0; i < selectedMeat.length; i++){\r\n            if (i === 0 && selectedMeat.length !== 1){\r\n                meatConcat = meatConcat + selectedMeat[i].meatName + \" (no additional cost), \";\r\n            }\r\n            else if (i === 0 && selectedMeat.length === 1) {\r\n                meatConcat = meatConcat + selectedMeat[i].meatName + \" (no additional cost)\";\r\n            }\r\n            else if (i >= 1 && i < selectedMeat.length - 1) {\r\n                meatConcat = meatConcat + selectedMeat[i].meatName + \" (+$1), \";\r\n            }\r\n            else if (i === selectedMeat.length - 1){\r\n                meatConcat = meatConcat + selectedMeat[i].meatName + \" (+$1)\";\r\n            }\r\n        }\r\n        setMeatStr(meatConcat);\r\n    };\r\n\r\n    const vegReceipt = () => {\r\n        let vegConcat = \"\";\r\n        for (let i = 0; i < selectedVeggies.length; i++){\r\n            if (i === 0 && selectedVeggies.length !== 1) {\r\n                vegConcat = vegConcat + selectedVeggies[i].vegName + \" (no additional cost), \";\r\n            }\r\n            else if (i === 0 && selectedVeggies.length === 1) {\r\n                vegConcat = vegConcat + selectedVeggies[i].vegName + \" (no additional cost)\";\r\n            }\r\n            else if (i >= 1 && i < selectedVeggies.length - 1) {\r\n                vegConcat = vegConcat + selectedVeggies[i].vegName + \" (+$1), \";\r\n            }\r\n            else if (i === selectedVeggies.length - 1){\r\n                vegConcat = vegConcat + selectedVeggies[i].vegName + \" (+$1)\";\r\n            }\r\n        }\r\n        setVegStr(vegConcat);\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n        <Jumbotron\r\n            style={{ backgroundColor: \"rgba(128, 53, 0, 0.781)\", paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n            <h2 className=\"text-center\" style={{ color: \"#FEEFB3\", fontFamily: \"monospace\" }}>OR BUILD YOUR OWN PIZZA:</h2>\r\n            <Form>\r\n            <CardGroup>\r\n                {/* Size Options */}\r\n                <Card\r\n                    text='danger'\r\n                    style={{ backgroundColor: \"#FEEFB3\"}}\r\n                >\r\n                    <Card.Header>SLICE</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Select a size:</Card.Title>\r\n                        <Card.Text>- Choose one</Card.Text>\r\n                        {/* Size options radio */}\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Personal\"\r\n                            name=\"size\"\r\n                            value=\"Personal\"\r\n                            checked={selectedSize === \"Personal\"}\r\n                            onChange={selectedSizeHandler} \r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Medium\"\r\n                            name=\"size\"\r\n                            value=\"Medium\"\r\n                            checked={selectedSize === \"Medium\"}\r\n                            onChange={selectedSizeHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Large\"\r\n                            name=\"size\"\r\n                            value=\"Large\"\r\n                            checked={selectedSize === \"Large\"}\r\n                            onChange={selectedSizeHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Extra Large\"\r\n                            name=\"size\"\r\n                            value=\"Extra Large\"\r\n                            checked={selectedSize === \"Extra Large\"}\r\n                            onChange={selectedSizeHandler}\r\n                        />\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-danger\"><h4>${selectedSizeCost}.00</h4></Card.Footer>\r\n                </Card>\r\n                {/* Crust Options */}\r\n                <Card\r\n                    text='danger'\r\n                    style={{ backgroundColor: \"#FEEFB3\"}}\r\n                >\r\n                    <Card.Header>CRUST</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Select a crust:</Card.Title>\r\n                        <Card.Text>- Choose one</Card.Text>\r\n                        {/* Crust options radio */}\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Plain Crust\"\r\n                            name=\"crust\"\r\n                            value=\"Plain Crust\"\r\n                            checked={selectedCrust === \"Plain Crust\"}\r\n                            onChange={selectedCrustHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Garlic Butter Crust\"\r\n                            name=\"crust\"\r\n                            value=\"Garlic Butter Crust\"\r\n                            checked={selectedCrust === \"Garlic Butter Crust\"}\r\n                            onChange={selectedCrustHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Cheese Stuffed Crust\"\r\n                            name=\"crust\"\r\n                            value=\"Cheese Stuffed Crust\"\r\n                            checked={selectedCrust === \"Cheese Stuffed Crust\"}\r\n                            onChange={selectedCrustHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Spicy Crust\"\r\n                            name=\"crust\"\r\n                            value=\"Spicy Crust\"\r\n                            checked={selectedCrust === \"Spicy Crust\"}\r\n                            onChange={selectedCrustHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"House Special Crust\"\r\n                            name=\"crust\"\r\n                            value=\"House Special Crust\"\r\n                            checked={selectedCrust === \"House Special Crust\"}\r\n                            onChange={selectedCrustHandler}\r\n                        />\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-danger\"><h4>${selectedCrustCost}.00</h4></Card.Footer>\r\n                </Card>\r\n                {/* Sauce Options */}\r\n                <Card\r\n                    text='danger'\r\n                    style={{ backgroundColor: \"#FEEFB3\"}}\r\n                >\r\n                <Card.Header>SAUCE</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Select a sauce:</Card.Title>\r\n                        <Card.Text>- Choose one</Card.Text>\r\n                        {/* Sauce options radio */}\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Marinara Sauce\"\r\n                            name=\"sauce\"\r\n                            value=\"Marinara Sauce\"\r\n                            checked={selectedSauce === \"Marinara Sauce\"}\r\n                            onChange={selectedSauceHandler} \r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"White Sauce\"\r\n                            name=\"sauce\"\r\n                            value=\"White Sauce\"\r\n                            checked={selectedSauce === \"White Sauce\"}\r\n                            onChange={selectedSauceHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Barbeque Sauce\"\r\n                            name=\"sauce\"\r\n                            value=\"Barbeque Sauce\"\r\n                            checked={selectedSauce === \"Barbeque Sauce\"}\r\n                            onChange={selectedSauceHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"No Sauce\"\r\n                            name=\"sauce\"\r\n                            value=\"No Sauce\"\r\n                            checked={selectedSauce === \"No Sauce\"}\r\n                            onChange={selectedSauceHandler}\r\n                        />\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-danger\"><h4>*No additional cost</h4></Card.Footer>\r\n                </Card>\r\n                {/* Cheese Options */}\r\n                <Card\r\n                    text='danger'\r\n                    style={{ backgroundColor: \"#FEEFB3\"}}\r\n                >\r\n                <Card.Header>CHEESE</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Select a cheese:</Card.Title>\r\n                        <Card.Text>- Choose one</Card.Text>\r\n                        {/* Sauce options radio */}\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Regular\"\r\n                            name=\"cheese\"\r\n                            value=\"Regular\"\r\n                            checked={selectedCheese === \"Regular\"}\r\n                            onChange={selectedCheeseHandler} \r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"No Cheese\"\r\n                            name=\"cheese\"\r\n                            value=\"No Cheese\"\r\n                            checked={selectedCheese === \"No Cheese\"}\r\n                            onChange={selectedCheeseHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Extra Cheese\"\r\n                            name=\"cheese\"\r\n                            value=\"Extra Cheese\"\r\n                            checked={selectedCheese === \"Extra Cheese\"}\r\n                            onChange={selectedCheeseHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"Vegan Cheeze\"\r\n                            name=\"cheese\"\r\n                            value=\"Vegan Cheeze\"\r\n                            checked={selectedCheese === \"Vegan Cheeze\"}\r\n                            onChange={selectedCheeseHandler}\r\n                        />\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-danger\"><h4>${selectedCheeseCost}.00</h4></Card.Footer>\r\n                </Card>\r\n                {/* Meat Options */}\r\n                <Card\r\n                    text='danger'\r\n                    style={{ backgroundColor: \"#FEEFB3\"}}\r\n                >\r\n                    <Card.Header>MEAT</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Select meat:</Card.Title>\r\n                        <Card.Text>- You can choose more than one</Card.Text>\r\n                        {/* Veg options checkbox */}\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Pepperoni\"\r\n                            name=\"meat\"\r\n                            value=\"Pepperoni\"\r\n                            checked={allMeat[0].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Sausage\"\r\n                            name=\"meat\"\r\n                            value=\"Sausage\"\r\n                            checked={allMeat[1].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Canadian Bacon\"\r\n                            name=\"meat\"\r\n                            value=\"Canadian Bacon\"\r\n                            checked={allMeat[2].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Chicken\"\r\n                            name=\"meat\"\r\n                            value=\"Chicken\"\r\n                            checked={allMeat[3].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                         <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Buffalo Chicken\"\r\n                            name=\"meat\"\r\n                            value=\"Buffalo Chicken\"\r\n                            checked={allMeat[4].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Vegan Chick'n\"\r\n                            name=\"meat\"\r\n                            value=\"Vegan Chick'n\"\r\n                            checked={allMeat[5].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Vegan Sausage\"\r\n                            name=\"meat\"\r\n                            value=\"Vegan Sausage\"\r\n                            checked={allMeat[6].isChecked}\r\n                            onClick={selectedMeatHandler}\r\n                        />\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-danger\"><h4>${selectedMeatCost}.00</h4></Card.Footer>\r\n                </Card>\r\n                {/* Veggie Options */}\r\n                <Card\r\n                    text='danger'\r\n                    style={{ backgroundColor: \"#FEEFB3\"}}\r\n                >\r\n                    <Card.Header>VEGGIES</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Select veggies:</Card.Title>\r\n                        <Card.Text>- You can choose more than one</Card.Text>\r\n                        {/* Veg options checkbox */}\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Tomatoes\"\r\n                            name=\"veggies\"\r\n                            value=\"Tomatoes\"\r\n                            checked={allVeggies[0].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Onions\"\r\n                            name=\"veggies\"\r\n                            value=\"Onions\"\r\n                            checked={allVeggies[1].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Olives\"\r\n                            name=\"veggies\"\r\n                            value=\"Olives\"\r\n                            checked={allVeggies[2].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Green Peppers\"\r\n                            name=\"veggies\"\r\n                            value=\"Green Peppers\"\r\n                            checked={allVeggies[3].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Mushrooms\"\r\n                            name=\"veggies\"\r\n                            value=\"Mushrooms\"\r\n                            checked={allVeggies[4].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Pineapple\"\r\n                            name=\"veggies\"\r\n                            value=\"Pineapple\"\r\n                            checked={allVeggies[5].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Spinach\"\r\n                            name=\"veggies\"\r\n                            value=\"Spinach\"\r\n                            checked={allVeggies[6].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Jalapeno\"\r\n                            name=\"veggies\"\r\n                            value=\"Jalapeno\"\r\n                            checked={allVeggies[7].isChecked}\r\n                            onClick={selectedVeggiesHandler}\r\n                        />\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-danger\"><h4>${selectedVegCost}.00</h4></Card.Footer>\r\n                </Card>\r\n            </CardGroup>\r\n            <Card.Footer style={{ color: \"#FEEFB3\"}}><h4>Total: ${orderTotal}.00</h4></Card.Footer>\r\n            <Row>\r\n                <Col>\r\n                    <Button\r\n                        variant=\"warning\"\r\n                        size=\"lg\"\r\n                        block\r\n                        onClick={getCosts}\r\n                    >Place Order!</Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        size=\"lg\"\r\n                        block\r\n                        onClick={clearAll}\r\n                    >Reset</Button>\r\n                </Col>\r\n            </Row>\r\n            </Form>\r\n        </Jumbotron>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default PizzaForm;","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Nav.js",[],"C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Jumbotron.js",["57"],"import React from \"react\";\r\nimport { Jumbotron, Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst Jumbo = () => {\r\n\r\n    return(\r\n        <Jumbotron className=\"text-center\"\r\n        style={{ backgroundColor: \"rgba(128, 53, 0, 0.781)\", marginTop: \"20px\" }}>\r\n            <Row>\r\n                <Col></Col>\r\n                <Col xs={6}>\r\n                <h1 style={{ color: \"#FEEFB3\", fontFamily: \"monospace\", fontSize: \"50px\" }}>FOR THE <span style={{ color: \"#F32013\" }}>LOVE</span> OF PIZZA...</h1>\r\n                <h3 style={{ color: \"#FEEFB3\", float: \"right\", fontFamily: \"monospace\" }}>YOU HAVE TO TASTE IT!</h3>\r\n                </Col>\r\n                <Col>\r\n                    {/* <img src={VeganPizza} \r\n                    style={{ width: \"350px\", height: \"250px\" }}\r\n                    /> */}\r\n                </Col>\r\n            </Row>\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\nexport default Jumbo;","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Prices.js",["58"],"import React from \"react\";\r\nimport { Jumbotron, Table, Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport VeganPizza from \"./img/Vegan-Pizza2.jpg\";\r\n\r\nconst Prices = ({ setSelectedSize, setSelectedSizeCost, \r\n                setSelectedCrust, setSelectedCrustCost,\r\n                setSelectedSauce, setSelectedMeatCost,\r\n                allMeat, setAllMeat, allVeggies, \r\n                setAllVeggies, setSelectedVegCost,\r\n                clearAll, buttonState, setButtonState\r\n             }) => {\r\n\r\n    const PopularPizza1 = () => {\r\n        clearAll();\r\n        setSelectedSize(\"Large\");\r\n        setSelectedSizeCost(14);\r\n        setSelectedCrust(\"Cheese Stuffed Crust\");\r\n        setSelectedCrustCost(3);\r\n        setButtonState(true);\r\n    };\r\n\r\n    const PopularPizza2 = () => {\r\n        clearAll();\r\n        setSelectedSize(\"Large\");\r\n        setSelectedSizeCost(14);\r\n        setSelectedSauce(\"White Sauce\")\r\n        setAllMeat(allMeat.map((item) => {\r\n            if (item.meatName === \"Buffalo Chicken\"){\r\n                return {\r\n                    ...item, isChecked: !item.isChecked\r\n                }\r\n            }\r\n            return item;\r\n        }));\r\n        setSelectedMeatCost(0);\r\n        setButtonState(true);\r\n    };\r\n\r\n    const PopularPizza3 = () => {\r\n        clearAll();\r\n        setSelectedSize(\"Extra Large\");\r\n        setSelectedSizeCost(16);\r\n        setAllMeat(allMeat.map((item) => {\r\n            if (item.meatName === \"Pepperoni\" || item.meatName === \"Sausage\" || item.meatName === \"Canadian Bacon\" || item.meatName === \"Chicken\"){\r\n                return {\r\n                    ...item, isChecked: !item.isChecked\r\n                }\r\n            }\r\n            return item;\r\n        }));\r\n        setSelectedMeatCost(3);\r\n        setButtonState(true);\r\n    };\r\n\r\n    const PopularPizza4 = () => {\r\n        clearAll();\r\n        setSelectedSize(\"Medium\");\r\n        setSelectedSizeCost(10);\r\n        setAllVeggies(allVeggies.map((item) => {\r\n            if (item.vegName === \"Tomatoes\" || item.vegName === \"Onions\" || item.vegName === \"Olives\" || item.vegName === \"Green Peppers\" || \r\n                item.vegName === \"Mushrooms\" || item.vegName === \"Spinach\"){\r\n                return {\r\n                    ...item, isChecked: !item.isChecked\r\n                }\r\n            }\r\n            return item;\r\n        }));\r\n        setSelectedVegCost(5);\r\n        setButtonState(true);\r\n    };\r\n\r\n    return(\r\n        <Jumbotron\r\n        style={{ color: \"#FEEFB3\", paddingBottom: \"10px\", paddingTop: \"10px\", backgroundColor: \"rgba(128, 53, 0, 0.781)\" }}\r\n        >\r\n            <h2 className=\"text-center\" style={{ fontFamily: \"monospace\" }}>CHOOSE FROM OUR MOST POPULAR PIZZAS:</h2>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Table striped\r\n                        style={{ color: \"#FEEFB3\", backgroundColor: \"rgba(243, 32, 19, 0.781)\" }}\r\n                        >\r\n                            <thead>\r\n                                <tr>\r\n                                <th></th>\r\n                                <th>PIZZA</th>\r\n                                <th>PRICE</th>\r\n                                <th>ORDER NOW</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                <td>1</td>\r\n                                <td>LARGE CHEESE STUFFED CRUST PIZZA</td>\r\n                                <td>$17.00</td>\r\n                                <td><Button variant=\"warning\" disabled={buttonState} onClick={PopularPizza1}>Select</Button></td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td>2</td>\r\n                                <td>LARGE BUFFALO CHICKEN PIZZA</td>\r\n                                <td>$14.00</td>\r\n                                <td><Button variant=\"warning\" disabled={buttonState} onClick={PopularPizza2}>Select</Button></td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td>3</td>\r\n                                <td>EXTRA LARGE MEAT LOVERS PIZZA</td>\r\n                                <td>$19.00</td>\r\n                                <td><Button variant=\"warning\" disabled={buttonState} onClick={PopularPizza3}>Select</Button></td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td>4</td>\r\n                                <td>MEDIUM VEGGIES LOVER PIZZA</td>\r\n                                <td>$15.00</td>\r\n                                <td><Button variant=\"warning\" disabled={buttonState} onClick={PopularPizza4}>Select</Button></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                        <Row>\r\n                            <Col></Col>\r\n                            <Col></Col>\r\n                            <Col></Col>\r\n                            <Col><Button variant=\"danger\" onClick={clearAll}>Reset</Button></Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default Prices;","C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\ThankYou.js",[],"C:\\Repos\\React-projects\\Pizza App\\pizza-app\\src\\components\\Receipt.js",["59"],"import React from \"react\";\r\nimport ThankYou from \"./img/thank-you.jpg\";\r\nimport { Jumbotron, Container } from \"react-bootstrap\";\r\n\r\nconst Receipt = ({ selectedSize, selectedSizeCost,\r\n                    selectedCrust, selectedCrustCost,\r\n                    selectedSauce,  \r\n                    selectedCheese, selectedCheeseCost,\r\n                    selectedMeat, meatStr,\r\n                    selectedVeggies, vegStr, \r\n                    orderTotal\r\n                }) => {\r\n\r\n    \r\n    return (\r\n        <Jumbotron className=\"text-center\"\r\n            style={{ color: \"#FEEFB3\", paddingBottom: \"10px\", paddingTop: \"10px\", backgroundColor: \"rgba(128, 53, 0, 0.781)\" }}>\r\n                <Container>\r\n                    <h3>You Ordered:</h3>\r\n                    <p>Size: {selectedSize} (${selectedSizeCost})</p>\r\n                    <p>Crust: {selectedCrust} \r\n                        {selectedCrustCost !== 0 ? \" (+$\" + selectedCrustCost + \")\": \" (no additional cost)\"}\r\n                    </p>\r\n                    <p>Sauce: {selectedSauce} (no additional cost)</p>\r\n                    <p>Cheese: {selectedCheese}\r\n                        {selectedCheeseCost !== 0 ? \" (+$\" + selectedCheeseCost + \")\": \" (no additional cost)\"}\r\n                    </p>\r\n                    {selectedMeat.length !== 0 ? <p>Meat: {meatStr}</p> : null}\r\n                    {selectedVeggies.length !== 0 ? <p>Veggies: {vegStr}</p> : null}\r\n                    <p>-----------------------------------------------</p>\r\n                </Container>\r\n                <Container className=\"total-price\">\r\n                    <h3>Total: ${orderTotal}.00</h3>\r\n                    <p></p>\r\n                </Container>\r\n            </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default Receipt;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":26,"nodeType":"66","messageId":"67","endLine":1,"endColumn":35},{"ruleId":"64","severity":1,"message":"68","line":2,"column":21,"nodeType":"66","messageId":"67","endLine":2,"endColumn":30},{"ruleId":"64","severity":1,"message":"69","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":18},{"ruleId":"64","severity":1,"message":"70","line":11,"column":10,"nodeType":"66","messageId":"67","endLine":11,"endColumn":16},{"ruleId":"71","severity":1,"message":"72","line":130,"column":7,"nodeType":"73","endLine":142,"endColumn":11},{"ruleId":"64","severity":1,"message":"70","line":1,"column":10,"nodeType":"66","messageId":"67","endLine":1,"endColumn":16},{"ruleId":"64","severity":1,"message":"74","line":3,"column":26,"nodeType":"66","messageId":"67","endLine":3,"endColumn":35},{"ruleId":"64","severity":1,"message":"75","line":58,"column":15,"nodeType":"66","messageId":"67","endLine":58,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":120,"column":8,"nodeType":"78","endLine":120,"endColumn":29,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":125,"column":8,"nodeType":"78","endLine":125,"endColumn":39,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"82","line":141,"column":8,"nodeType":"78","endLine":141,"endColumn":100,"suggestions":"83"},{"ruleId":"64","severity":1,"message":"74","line":2,"column":21,"nodeType":"66","messageId":"67","endLine":2,"endColumn":30},{"ruleId":"64","severity":1,"message":"84","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":18},{"ruleId":"64","severity":1,"message":"85","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":16},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Jumbotron' is defined but never used.","'PizzaVideo' is defined but never used.","'render' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Container' is defined but never used.","'sauceCosts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createCheckedMeatList' and 'createCheckedVegList'. Either include them or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'addUpMeatCost' and 'addUpVegCost'. Either include them or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'orderTotalHandler'. Either include it or remove the dependency array.",["90"],"'VeganPizza' is defined but never used.","'ThankYou' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [allVeggies, allMeat, createCheckedVegList, createCheckedMeatList]",{"range":"97","text":"98"},"Update the dependencies array to be: [selectedVeggies, selectedMeat, addUpVegCost, addUpMeatCost]",{"range":"99","text":"100"},"Update the dependencies array to be: [selectedSizeCost, selectedCrustCost, selectedCheeseCost, selectedMeatCost, selectedVegCost, orderTotalHandler]",{"range":"101","text":"102"},[3820,3841],"[allVeggies, allMeat, createCheckedVegList, createCheckedMeatList]",[3928,3959],"[selectedVeggies, selectedMeat, addUpVegCost, addUpMeatCost]",[4458,4550],"[selectedSizeCost, selectedCrustCost, selectedCheeseCost, selectedMeatCost, selectedVegCost, orderTotalHandler]"]